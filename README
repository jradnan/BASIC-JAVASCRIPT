১ >>> পূর্ণ সংখ্যা : parseInt যেমন : 1,2,3
ভগ্নাংশ অথবা পূর্ণ সংখ্যা নয় যেমন : 1.34, 776.90, 99.99

Javascript e parseFloat() string কে nonestring করে দেয়   আর parsInt() কোন সংখ্যার ১.৩ পরের সংখ্যা কে সমান করে দেয় 
১.৩ হলে ১ করে দেয়


যেমন : 
var eggPrice = "3.66";
var applePrice = "4.99";
var totall = eggPrice +applePrice;

var egg = parseFloat(eggPrice);
var apple = parseFloat(applePrice);
var allPrice = egg +apple;

২ >>> কোনটা কি ধরনের ডাটা টাইপ এইটা বুঝাতে typeof use করতে হয় |
যেমন :
var tShirtPrice = 200;
var applePrice = '200';
var isRining = true;

console.log(typeof tShirtPrice);
console.log(typeof applePrice);
console.log(typeof isRining);


৩ >>> মডুলাস মানে ভাগশেষ।  % চিন্হ দিয়ে ভাগশেষ করতে হয়।  
যেমন : 
var food = 123;
var hungryPerson = 10;
var totalPerson = food % hungryPerson;
console.log(totalPerson);


৪ >>> কোনটা সত্য কোনটা মিথ্যা বুঝাতে Boolean (True/False) 
যেমন : 
var isRining = true;
var heIsGoing = false;
console.log(isRining);
console.log(heIsGoing);

৫ >>> array ব্যবহার করতে [] লিখে ব্যবহার করতে হয় |
অনেক গুলো উপাদান (Element) লিখতে array ব্যবহৃত হয় 
যেমন :

var food = ['apple', 'bananas', 'orange', 'mango',   ];
console.log(food);
console.log(food.length);

কোনটার মধ্যে কততম বা এর মধ্যে কি আছে বুঝাতে array এর 
indexof ব্যবহৃত হয়
যেমন :
var fruit = ['apple', 'banana', 'pineapple', 'mango', 'jackfruit'];
var fruitCount = fruit.indexOf('mango')

কততম এর মধ্যে কি আছে সেটা বুঝতে ওই উপাদান (Elements) এর সাথে 
উপাদান[] লিখে ব্যবহার করতে হয় 

যেমন :

var fruitIndex = fruit[4];

console.log(fruitIndex);


কোনো উপাদান (Elements) এর মান পরিবর্তন করতে হলে 
যেমন :
var number = [22, 33, 45, 210, 190, 321, 330];

number[4] = 99;
console.log(number);

উপাদান এর ভিতর কিছু ঢুকাতে গেলে array.push() ব্যবহৃত হয়
যেমন :
var number = [22, 33, 45, 210, 190, 321, 330];
number.push(87)
console.log(number);

উপাদান এর ভিতর থেকে বের করতে গেলে arra.pop() ব্যবহৃত হয়
যেমন :
number.pop()
console.log(number);


এরে:

১. array এর কিছু জিনিস আমরা অলরেডি জানি। index, length, push, pop 

২. for লুপ বা for of লুপ দিয়ে array এর সব উপাদান এর উপরে লুপ চালানো যায়। 

৩. array এর মধ্যে কোন উপাদান খুঁজতে চাইলে তুমি array এর মধ্যে indexOf দিয়ে index চেক করতে পারো 

৪. এইবার array এর মধ্যে এক উপাদান আছে কিনা সেটা includes দিয়েও চেক করতে পারো 

৫. এছাড়াও array এর ছোট একটা অংশ বের করার জন্য slice, splice ইউজ করতে পারো 


৬ >>


আজকের সেকেন্ড টপিক হচ্ছে-- শর্ত। বা কন্ডিশন। শর্ত সত্য না মিথ্যা সেটা চেক করবে আজকে। সেখানে দেখতে পারবে মোটামুটি ছয়ভাবে শর্ত চেক করা যায়। সেগুলা হচ্ছে-- >, <, ==, !=, <=, >= ব্যস। এইগুলাই। 

< এইটা দিয়ে চেক করবে বাম পাশে যেটা আছে সেটা ডানপাশেরটা থেকে ছোট কিনা 

> এইটা দিয়ে চেক করবে বাম পাশে যেটা আছে সেটা ডানপাশেরটা থেকে বড় কিনা 

== এইটা দিয়ে চেক করবে বাম পাশেরটা আর ডানপাশেরটা দুইটাই সমান কিনা

!= এইটা দিয়ে চেক করবে বাম পাশেরটা আর ডানপাশেরটা দুইটাই অসমান (ডিফারেন্ট বা আলাদা) কিনা

<= এইটা দিয়ে চেক করবে বাম পাশে যেটা আছে সেটা ডানপাশেরটা থেকে ছোট বা সমান কিনা 

>= এইটা দিয়ে চেক করবে বাম পাশে যেটা আছে সেটা ডানপাশেরটা থেকে বড় বা সমান কিনা 

 

দুইটা শর্তের মাঝখানে:

&& থাকার মানে দুইটা শর্তই পূরণ করতে হবে। একটা করবে আরেকটা করবে না। তাহলে হবে না। 

।। থাকার মানে দুইটা শর্তেরযেকোন একটা পূরণ করলেই হবে। তবে দুইটাই না করলে হবে না। 

If else এর ক্ষেত্রে এভাবে লিখতে হয় 
 if (condition) {
    
 } else {
    
 }

যদি শর্ত পূরণ হয় তাহলে প্রথম টি তে যাবে আর যদি না হয় পরের টি তে যাবে
যেমন :
var samsungTablet = 230000;
var myBudget = 10000;
 if(myBudget > samsungTablet){
    console.log('I will Buy');
 }else{
    console.log('I will not buy');
 }

অধিক শর্ত হলে এভাবে লিখতে হয় 
যেমন :
var cook = 25;
var noodles = 30;
var halim = 60;
var birani = 120;
var myBudget = 25; 

if(myBudget > birani){
    console.log('birani khabo');
}else if(myBudget > halim){
    console.log('halim khabo');
}else if(myBudget >= cook){
    console.log('cook khabo');
}
else{
    console.log('muri khao');
}


৭ >> যদি একই মান বার বার বাড়াতে হয় তখন while loop ব্যবহার করতে হয় 
যেমন :
var beton = 0;

var beton = 0;

while(beton<9){
    console.log(beton);
    console.log('Sir, please amr ei month er beton den');

    beton++;
}

var number = 0;
while(number < 10){
    console.log(number);
 number++;
}
 

এখান এ while loop এর ভিতরে আগে যেই variable (var beton = 0) 
ডিক্লেয়ার করা হয়েছে তার মান বাড়ানোর জন্য while loop এর ভিতরে 
তার মান এক এক করে বাড়ানো হয়েছে (beton++)


আবার আরেকভাবে করা যায় সংক্ষেপে তা হলো for loop |
while loop এর মতো একই ভাবে লিখতে হয় শুধু পার্থক্য হলো 
while loop এ আগে variable ডিক্লেয়ার করতে হয় করতে হয় আর for loop এ
একই লাইনে variable,condition এবং মান বাড়ানোর কাজ করতে হয় 
যেমন :

for(var beton =0; beton < 9; beton++){
    console.log('bhai please amr beton diye den');
}


৮ >> কোনো একটা function এর ভিতর ওই function
কে যদি কল করা হয় তাহলে তাকে recursion বলে 
যেমন :

function consoleNumber(i){
    
    if(i > 5){
        return;
    }
    console.log(i);
    consoleNumber(i+1);
}
consoleNumber(1);




৯ >> Arguments

function এর ভিতর Arguments নামে একটা জিনিস আছে যাকে array like object 
কিন্তু পুরোপুরি array না
যার ভিতর array.pop, arry.push কাজ করে না তবে for loop, for of 
চালানো যায় 
যেমন : 

function addNumbers(num1,num2 ){
  let result = 0;
  for(const num of arguments){
    result = result + num;
  }
  return result;
}

const numbers = addNumbers(500,200,100)

console.log(numbers);


function getFullName (fisrtName, lastName){
    let fullName = "";
    for(const part of arguments){
        fullName = fisrtName + part + '';

    }
    return fullName;
}


const name = getFullName ("my name"," is khan")

console.log(name);



১০>> কোন ফাংশন যেখান থেকে কল করা হবে সেটার বামপাসে কোন variable থাকলে ঐ ফাংশন এর রিটার্ন এর পর যা লেখা থাকবে সেটার মান (value) হয়ে যাবে ওই variable এর মান বা value


*****************MOST IMPORTANT MODULE********************

Module 28
Shopping cart and pin matcher


Module 29
how to search a product in array 


***********ES6***************

1>> Spread Operator  হলো কোনো একটা array এর ভিতর এর উপাদান extract করে নিয়ে আসতে পারবে
যেমন ঃ 
const numbers = [220, 330, 323, 455];

console.log(numbers);
console.log(...numbers);

2>> Destructuring
Declare variable based on the name of an object property

অবজেক্টে একাধিক প্রপার্টি এর value এক সাথে বের
করে variable এ রাখাকে destructuring বলে
যেমন ঃ 

const man = {id : 2, name:'Adnan', height: 5.3, weight:60};

const {id, name , height , weight} = man;

>>> Array destructuring

এটি serial wise variable হিসেবে কাজ করে 
যেমন ঃ

const [highest, lowest] = [332, 221]

3>> map.Js 

 map পুরো একটা array return করে

 যেমন ঃ

  const products = [
    {name:"ada", price:12, color:'mejenta'},
    {name:"piaj", price:80, color:'red'},
    {name:"roshun", price:180, color:'white'},
    {name:"alu", price:150, color:'mix'},
]


const productPrice = products.map(product => product.price);




4>> forEach()

  forEach() একটি অ্যারের প্রতিটি 
  উপাদানের জন্য একটি ফাংশন কল
  করে কিন্তু কোন কিছু রিটার্ন করেনা

  যেমন ঃ


  const products = [
    {name:"ada", price:12, color:'mejenta'},
    {name:"piaj", price:80, color:'red'},
    {name:"roshun", price:180, color:'white'},
    {name:"alu", price:150, color:'mix'},
]

productPrice.forEach(product=>console.log(product))

6>> filter() অ্যারের প্রতিটি উপাদানের মধ্যে যেটা যেটা
 শর্ত ফুলফিল করবে তাদেরকে নতুন একটা অ্যারে তে রেখে 
 সেটাকে রিটার্ন করে

 যেমন ঃ

 const numbers = [323, 455, 660, 449, 120, 130 ,140];

 const bigNumbers = numbers.filter(number => number > 500);
 const smallNumbers = numbers.filter(number => number < 500);

 console.log(smallNumbers);

 ************************find()************************
 find() অ্যারের এর প্রথম যে উপাদান শর্ত ফুলফিল করবে 
 শুধু সেই উপাদানকে রিটার্ন করে
 
 যেমন ঃ

 const products = [
    {name:"ada", price:12, color:'mejenta'},
    {name:"piaj", price:80, color:'red'},
    {name:"roshun", price:180, color:'white'},
    {name:"alu", price:150, color:'mix'},
];

const find = products.find(product => product.price > 100);

console.log(find); 

7>> Primitive data types প্রকারগুলি সহজ এবং অপরিবর্তনীয়, 
যার অর্থ তাদের পরিবর্তন বা পরিবর্তন করা যায় না।


let a = 2;
let b = a;
console.log()

Non-primitive data types প্রকারগুলি আরও জটিল এবং সংশোধন করা
যেতে পারে।
উদাহরণস্বরূপ, আপনি একটি বস্তুর একটি সম্পত্তির মান পরিবর্তন করতে 
পারেন বা একটি অ্যারেতে একটি নতুন উপাদান যোগ করতে পারেন।




8>> Undefined

**Null or undefined 
variable declare করা হলেও কোন মান সেট করা হয় নাই

**function কিছু রিটার্ন করে নাই

**রিটার্ন লেখা, কিন্তু কিছু রিটার্ন করা হয় নাই

**parameter পাস করা হয় নাই

**object এর ভিতর 
property নাই সেটা access করতে চাইলে undefined দেখাবে

**range এর বাইরে array 
এর কোন উপাদানকে access করতে চাইলে undefined দেখাবে

**delete করা array এর উপাদান access করা

**কোন variable এর মান সরাসরি undefined সেট করা

9>>Local scop and Global Scope
******Local Scope*******
যখন একটি function এর ভিতরে একটি variable তৈরী হয়
তখন সেটাকে local scop বলে। এটি করার
মাধ্যমে variable গুলোকে শুধু সেই function
এর মধ্যে access করা যায়।
*******Globa Scope******
Global variable গুলোকে 
javascript প্রোগ্রামের যেকোনো যায়গা থেকে access করা যায়।
*******Block Scope******
if,switch, conditions
বা for এবং while loops এর ভিতরে area টাকে block scope বলে

*********Closure**********
একটা function থেকে যদি আরেকটা function return
করে তাহলে তারা নিজস্ব একটা closure অথবা 
encapsulation তৈরি করে


10>> function এর parameter এ চাইলে default parameter দেয়া যায় তাহলে 
যে কোন একটার parameter এর value না দিলেও undefined দেখাবে না
অর্থাৎ যেই parameter এর default value দিয়ে দেব সেটার মান
না দিলেও undefined দেখাবে না।  

যেমন : 

function add(first , second = 0){
    const total = first + second;
    return total;

}


const result = add(10)
console.log(result);

11>> Parameter হচ্ছে function এর variables
Argument মানে যে মান গুলো তুমি পাঠাবা |

যেমন :

এখানে a, b, হচ্ছে Parameter 

function add(a,b){
    return a+b;
}

const reult = add(2,2)

এখানে যে মান 2,2 এটা হচ্ছে Argument


11>> এপিয়াই (API) সার্ভারের অংশ। ফেচ (fetch) এপিআই (API) এর মাধ্যমে কোনো 
এপিআই (API) এর কাছে রিকোয়েস্ট পাঠালে এপিআই (API) সেটা রিসিভ করে তার সার্ভারের কাছে পাঠায়। সার্ভার প্রসেস করে একটা রেসপন্স তৈরি করে এপিয়াই (API) এর কাছে দেয়। এপিআই (API) সেটা ক্লায়েন্টের কাছে পাঠায়।

যেমন :

const url = `https://jsonplaceholder.typicode.com/posts`
fetch(url).then(res=>res.json()).then(data=> showPosts(data));

      API means = APLICATION PROGRAMMING INTERFACE

<<<<<<<<<<<<<<<<<<< Advance Object >>>>>>>>>>>>>>>>>>>>>>>


1>> কোন একটা object এর ভেতর থেকে function থাকলে সেটাকে methode বলে
এবং object এর ভেতর থেকে যেই function declare করা হয়েছে ওই function এর ভেতর থেকে
object এর কোন property কে পেতে হলে this ব্যবহার করতে হয়

যেমন :

const student = {
    name: "Adnan",
    money: 5000,
    study: "Web Programming",
    subjects: ['wordpress', 'javascript', 'React', 'mongo', 'node', 'front end', 'full stack'],
    exam: function () {
        return this.name + 'participating in an exam'
    }
}

2>> কোন একটা object এর ভেতর property কে keys বলে
এবং property er মান কে values বলে। 
আমরা চাইলে object এর ভেতর শুধু keys গুলো দেখাতে পারি
আবার শুধু মান গুলো কে দেখাতে পারি 


যেমন :

const bottle = {color:"yellow", price : 50, isCleaned:true, capacity:1};
const keys = Object.keys(bottle);
const values = Object.values(bottle)
console.log(keys);
console.log(values);

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




<<<<<<<<<<<<< What Really Is Javascript >>>>>>>>>>>>>>>>>

1. JavaScript is a highly abstracted programming language

High abstraction

* We don't have to handle resource Management and memory allocation
* We don't have to handle garbage collection
* Reduces details so that developers can focus on logic better
* Improve understandability as well as maintainability of the code


2. JavaScript is a JIT compiled language

<<<< Just in time JIT >>>>
* JavaScript is not a purely interpreted language
* Modern JavaScript is JIT compiled
* Just in time compiler converts the entire code
  into machine code and executes them immediately


3. JavaScript is a multi-paradigm programming language

<<<< Multi-paradigm >>>>
* Code structure that will determine the style or way of programming
1 >> Procedural programming
    ***Involves writing instructions
    ***Tells the computer when it should do step by step
    
2 >> Object oriented programming
    ***Modeling a system as a collection of objects
    ***The object contains Both functions (or methods) and data

3 >> Functional programming
    ***An approach to software development that uses pure functions
    ***To create maintainable software


4. JavaScript is a prototype-based programming language

* জাভাস্ক্রিপ্ট অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ল্যাঙ্গুয়েজ হলেও মূলত এটা প্রোটোটাইপ বেসড। অন্যান্য মেজর ল্যাঙ্গুয়েজের অবজেক্ট মডেল আর জাভাস্ক্রিপ্ট এর অবজেক্ট মডেল এক না। জাভাস্ক্রিপ্ট এর সব অবজেক্টেই প্রোটোটাইপ __proto__ অবজেক্ট পাবেনঃ
console.dir({});
এই __proto__ টাকে আসলে ডান্ডার প্রোটো (dunder proto) বলে। সব অবজেক্টেই পাবেন এটাঃ

var oneArr = [1, 2, 3, 4, 5];
console.dir(oneArr);

এভাবে যখন আমরা আমাদের অ্যারের ভিতরে প্রথম ওপেন করার পর শুধুমাত্র ইলিমেন্ট আর length প্রপার্টি টা দেখলেম শুধুমাত্র, বাকিগুলো বা push মেথড কিন্তু সেখানে ছিলো না। সেটা যখন আমরা আবার ডান্ডার প্রোটো __proto__ (Dunder Proto) ওপেন করলাম তখন আমরা push পাইলাম। আবার একদম নিচে গেলে আবার দেখবেন সেই ডান্ডার প্রোটো আরেকটা আছে। ঐটা ওপেন করলেও আরো কিছু মেথড পাবেন। এখন এটাকেই আসলে প্রোটোটাইপ চেইন বলে। এখানে যখন একটা মেথড কল করা হয়, প্রথমে সেটা একদম প্রথম থেকে অবজেক্ট একদম নিজের থেকে খোঁজাখুঁজি শুরু করে, সেখানে না পাওয়া গেলে ভিতরে(ডান্ডার প্রোটোর ভিতরে) আবার খোঁজা হয়, সেখানেও না পাওয়া গেলে আরো ভিতরে(আরেকটা ডান্ডার প্রোটোর ভিতরে) খোঁজা হয়… এরকমভাবে খুঁজতেই থাকে যতক্ষন না সেই মেথড বা প্রপার্টি না পাওয়া যায়।

তো এভাবেই জাভাস্ক্রিপ্ট এর অবজেক্ট ওরিয়েন্টেড এর ব্যাপারটা প্রোটোটাইপ বেসড কাজ করে। সব অবজেক্ট এভাবে একটা আরেকটার সাথে লিঙ্ক হয়ে থাকে এই মডেলের মাধ্যমে।


5. JavaScript is dynamically typed
    






*****false****
1/ falsy 
2/ false 
3/ 0
4/ empty string
5/undefined 
6/null
7/NaN
*****truth*****
1/true
2/any number (positve or negative) 
3/ any string including single whitespace, "0", " false"
4/empty array 
5/ empty object 
Anything else that is not falsy will be truthy